#include <iostream>
#include <vector>
#include <set>
#include <climits>

using namespace std;

void dijkstra(const vector<vector<pair<int, int>>>& graph, int source) {
    int V = graph.size();
    vector<int> dist(V, INT_MAX);
    set<pair<int, int>> s;

    dist[source] = 0;
    s.insert({0, source});

    while (!s.empty()) {
        int u = s.begin()->second;
        s.erase(s.begin());

        for (const auto& neighbor : graph[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            if (dist[u] + weight < dist[v]) {
                s.erase({dist[v], v});
                dist[v] = dist[u] + weight;
                s.insert({dist[v], v});
            }
        }
    }

    for (int i = 0; i < V; i++) {
        cout << "Distance from source to vertex " << i << " is " << dist[i] << endl;
    }
}

int main() {
    int V = 5;
    vector<vector<pair<int, int>>> graph(V);

    graph[0].push_back({1, 10});
    graph[0].push_back({4, 5});
    graph[1].push_back({2, 1});
    graph[1].push_back({4, 2});
    graph[2].push_back({3, 4});
    graph[3].push_back({0, 7});
    graph[4].push_back({1, 3});
    graph[4].push_back({2, 9});
    graph[4].push_back({3, 2});

    dijkstra(graph, 0);
    return 0;
}
